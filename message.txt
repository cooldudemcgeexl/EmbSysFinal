/*
 * File:   main.c
 * Author: nick
 *
 * Created on April 14, 2022, 6:28 PM
 */

// CONFIG1
#pragma config FOSC = HS // Oscillator Selection bits (RC oscillator: CLKOUT function on RA6/OSC2/CLKOUT pin, RC on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF          // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF         // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF         // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF            // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF           // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF          // Brown Out Reset Selection bits (BOR enabled)
#pragma config IESO = ON           // Internal External Switchover bit (Internal/External Switchover mode is enabled)
#pragma config FCMEN = ON          // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is enabled)
#pragma config LVP = OFF           // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF      // Flash Program Memory Self Write Enable bits (Write protection off)

#define _XTAL_FREQ 8000000
#define DHT11_PIN PORTCbits.RC7
#define DHT11_PIN_DIR TRISCbits.TRISC7
#define LOW 0
#define HIGH 1
#define OUTPUT 0
#define INPUT 1

#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>
#include <math.h>
#include <xc.h>

// set configuration words
/*#pragma config CONFIG1 = 0x2CD4
#pragma config CONFIG2 = 0x0700
*/

// DHT11 sensor connection (here data pin is connected to RB0

char Temperature[] = "Temp = 00.0 C  ";
char Humidity[]    = "RH   = 00.0 %  ";
unsigned char Temp1, Temp2, Hum1, Hum2, CheckSum;

void Start_Signal(void) {
  DHT11_PIN_DIR = 0;     // configure DHT11_PIN as output
  DHT11_PIN = 0;         // clear DHT11_PIN output (logic 0)
 
  __delay_ms(25);        // wait 25 ms
  DHT11_PIN = 1;         // set DHT11_PIN output (logic 1)
 
  __delay_us(30);        // wait 30 us
  DHT11_PIN_DIR = 1;  
  //// configure DHT11_PIN as input
}

__bit Check_Response() {
  TMR1H = 0;                 // reset Timer1
  TMR1L = 0;
  TMR1ON = 1;                // enable Timer1 module
 
  while(!DHT11_PIN && TMR1L < 100);  // wait until DHT11_PIN becomes high (checking of 80µs low time response)
  if(TMR1L > 99)                     // if response time > 99µS  ==> Response error
    return 0;                        // return 0 (Device has a problem with response)
  
  else
  {
    TMR1H = 0;               // reset Timer1
    TMR1L = 0;
 
    while(DHT11_PIN && TMR1L < 100); // wait until DHT11_PIN becomes low (checking of 80µs high time response)

    if(TMR1L > 99 * 5)                   // if response time > 99µS  ==> Response error
    {  
        PORTB = 0b1111;
        return 0;                      // return 0 (Device has a problem with response)
    }
    else
    {
      PORTB = 0b0111; 
      return 1;                      // return 1 (response OK)
  
    }
  }
}

__bit Read_Data(unsigned char* dht_data)
{
  *dht_data = 0;
 
  for(char i = 0; i < 8; i++)
  {
    TMR1H = 0;             // reset Timer1
    TMR1L = 0;
    
    PORTB = 0b1110;
    while(!DHT11_PIN)      // wait until DHT11_PIN becomes high
      if(TMR1L > 100) {    // if low time > 100  ==>  Time out error (Normally it takes 50µs)
        return 1;
      }
    PORTB = 0b1100;
    TMR1H = 0;             // reset Timer1
    TMR1L = 0;
 
    while(DHT11_PIN)       // wait until DHT11_PIN becomes low
      if(TMR1L > 100) {    // if high time > 100  ==>  Time out error (Normally it takes 26-28µs for 0 and 70µs for 1)
        return 1;          // return 1 (timeout error)
      }
    PORTB = 0b1111;
     if(TMR1L > 50)                  // if high time > 50  ==>  Sensor sent 1
       *dht_data |= (1 << (7 - i));  // set bit (7 - i)
  }
 
  return 0;                          // return 0 (data read OK)
}

void main(void)
{
  OSCCON =  0X70;       // set internal oscillator to 8MHz
  ANSELH = 0;           // configure all PORTB pins as digital
  T1CON  = 0x10;        // set Timer1 clock source to internal with 1:2 prescaler (Timer1 clock = 1MHz)
  TMR1H  = 0;           // reset Timer1
  TMR1L  = 0;
  TRISB = 0;
  PORTB = 0x00;
  
  while(1)
  {
    Start_Signal();     // send start signal to the sensor
 
    if(Check_Response())    // check if there is a response from sensor (If OK start reading humidity and temperature data)
    {
        Read_Data(&Hum1);
        Read_Data(&Hum2);
        Read_Data(&Temp1);
        Read_Data(&Temp2);
        if(CheckSum == ((Hum1 + Hum2 + Temp1 + Temp2) & 0xFF))
        {                                       // if there is no checksum error
          Temperature[7]  = Temp1 / 10  + '0';
          Temperature[8]  = Temp1 % 10  + '0';
          Temperature[10] = Temp2 / 10  + '0';
          Humidity[7]     = Hum1 / 10 + '0';
          Humidity[8]     = Hum1 % 10 + '0';
          Humidity[10]    = Hum2 / 10 + '0';
          Temperature[11] = 223;
        // put degree symbol (°)
        }
 
        // if there is a checksum error
        else
        {
          PORTB = 0b0010;
        }
 
    }
    
 
    // if there is a response (from the sensor) problem
    else
    {
        //PORTB = 0b0100;
    }
 
    TMR1ON = 0;        // disable Timer1 module
    __delay_ms(1000);  // wait 1 second
 
  }
 
}